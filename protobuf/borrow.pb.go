// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol/borrow.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Book struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Author               string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Publish              string   `protobuf:"bytes,4,opt,name=publish,proto3" json:"publish,omitempty"`
	Introduction         string   `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Number               int64    `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	ISBN                 string   `protobuf:"bytes,7,opt,name=ISBN,proto3" json:"ISBN,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{0}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetPublish() string {
	if m != nil {
		return m.Publish
	}
	return ""
}

func (m *Book) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *Book) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Book) GetISBN() string {
	if m != nil {
		return m.ISBN
	}
	return ""
}

type GetBookListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBookListReq) Reset()         { *m = GetBookListReq{} }
func (m *GetBookListReq) String() string { return proto.CompactTextString(m) }
func (*GetBookListReq) ProtoMessage()    {}
func (*GetBookListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{1}
}
func (m *GetBookListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBookListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBookListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBookListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBookListReq.Merge(m, src)
}
func (m *GetBookListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetBookListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBookListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetBookListReq proto.InternalMessageInfo

type GetBookListRsp struct {
	Books                []*Book  `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBookListRsp) Reset()         { *m = GetBookListRsp{} }
func (m *GetBookListRsp) String() string { return proto.CompactTextString(m) }
func (*GetBookListRsp) ProtoMessage()    {}
func (*GetBookListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{2}
}
func (m *GetBookListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBookListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBookListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBookListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBookListRsp.Merge(m, src)
}
func (m *GetBookListRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetBookListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBookListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetBookListRsp proto.InternalMessageInfo

func (m *GetBookListRsp) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type BorrowBookReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BookId               int64    `protobuf:"varint,2,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BorrowBookReq) Reset()         { *m = BorrowBookReq{} }
func (m *BorrowBookReq) String() string { return proto.CompactTextString(m) }
func (*BorrowBookReq) ProtoMessage()    {}
func (*BorrowBookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{3}
}
func (m *BorrowBookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowBookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowBookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowBookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowBookReq.Merge(m, src)
}
func (m *BorrowBookReq) XXX_Size() int {
	return m.Size()
}
func (m *BorrowBookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowBookReq.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowBookReq proto.InternalMessageInfo

func (m *BorrowBookReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *BorrowBookReq) GetBookId() int64 {
	if m != nil {
		return m.BookId
	}
	return 0
}

type BorrowBookRsp struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BorrowBookRsp) Reset()         { *m = BorrowBookRsp{} }
func (m *BorrowBookRsp) String() string { return proto.CompactTextString(m) }
func (*BorrowBookRsp) ProtoMessage()    {}
func (*BorrowBookRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{4}
}
func (m *BorrowBookRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowBookRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowBookRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowBookRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowBookRsp.Merge(m, src)
}
func (m *BorrowBookRsp) XXX_Size() int {
	return m.Size()
}
func (m *BorrowBookRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowBookRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowBookRsp proto.InternalMessageInfo

func (m *BorrowBookRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ReturnBookReq struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BookId               int64    `protobuf:"varint,2,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReturnBookReq) Reset()         { *m = ReturnBookReq{} }
func (m *ReturnBookReq) String() string { return proto.CompactTextString(m) }
func (*ReturnBookReq) ProtoMessage()    {}
func (*ReturnBookReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{5}
}
func (m *ReturnBookReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnBookReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnBookReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnBookReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnBookReq.Merge(m, src)
}
func (m *ReturnBookReq) XXX_Size() int {
	return m.Size()
}
func (m *ReturnBookReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnBookReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnBookReq proto.InternalMessageInfo

func (m *ReturnBookReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReturnBookReq) GetBookId() int64 {
	if m != nil {
		return m.BookId
	}
	return 0
}

type ReturnBookRsp struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReturnBookRsp) Reset()         { *m = ReturnBookRsp{} }
func (m *ReturnBookRsp) String() string { return proto.CompactTextString(m) }
func (*ReturnBookRsp) ProtoMessage()    {}
func (*ReturnBookRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a706cddf1f5749cb, []int{6}
}
func (m *ReturnBookRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReturnBookRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReturnBookRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReturnBookRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReturnBookRsp.Merge(m, src)
}
func (m *ReturnBookRsp) XXX_Size() int {
	return m.Size()
}
func (m *ReturnBookRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReturnBookRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ReturnBookRsp proto.InternalMessageInfo

func (m *ReturnBookRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Book)(nil), "borrow.Book")
	proto.RegisterType((*GetBookListReq)(nil), "borrow.GetBookListReq")
	proto.RegisterType((*GetBookListRsp)(nil), "borrow.GetBookListRsp")
	proto.RegisterType((*BorrowBookReq)(nil), "borrow.BorrowBookReq")
	proto.RegisterType((*BorrowBookRsp)(nil), "borrow.BorrowBookRsp")
	proto.RegisterType((*ReturnBookReq)(nil), "borrow.ReturnBookReq")
	proto.RegisterType((*ReturnBookRsp)(nil), "borrow.ReturnBookRsp")
}

func init() { proto.RegisterFile("protocol/borrow.proto", fileDescriptor_a706cddf1f5749cb) }

var fileDescriptor_a706cddf1f5749cb = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x75, 0x12, 0x8d, 0xcf, 0xab, 0x4f, 0xe4, 0x82, 0xbe, 0x21, 0x8b, 0xe0, 0x9b, 0x95, 0x2b,
	0x1f, 0xf8, 0xba, 0x2c, 0x94, 0x66, 0x53, 0x84, 0xd2, 0x45, 0xba, 0xeb, 0xa6, 0x18, 0x93, 0xd6,
	0xa0, 0x66, 0xe2, 0x4c, 0x86, 0xfe, 0x4a, 0x3f, 0xa2, 0xbf, 0x51, 0xe8, 0xb2, 0x9f, 0x50, 0xec,
	0x8f, 0x94, 0x99, 0x68, 0x63, 0x20, 0xbb, 0xee, 0xee, 0x39, 0x27, 0x67, 0xee, 0xb9, 0x87, 0xc0,
	0x30, 0x13, 0x3c, 0xe7, 0x4b, 0xbe, 0xf9, 0x17, 0x72, 0x21, 0xf8, 0xd3, 0xd4, 0x60, 0x74, 0x0a,
	0xc4, 0x5e, 0x08, 0x34, 0x7d, 0xce, 0xd7, 0xd8, 0x07, 0x2b, 0x89, 0x28, 0x19, 0x93, 0x89, 0x1d,
	0x58, 0x49, 0x84, 0x08, 0xcd, 0x74, 0xb1, 0x8d, 0xa9, 0x35, 0x26, 0x93, 0x4e, 0x60, 0x66, 0x1c,
	0x81, 0xb3, 0x50, 0xf9, 0x8a, 0x0b, 0x6a, 0x1b, 0xf6, 0x80, 0x90, 0x42, 0x3b, 0x53, 0xe1, 0x26,
	0x91, 0x2b, 0xda, 0x34, 0xc2, 0x11, 0x22, 0x83, 0x5e, 0x92, 0xe6, 0x82, 0x47, 0x6a, 0x99, 0x27,
	0x3c, 0xa5, 0x2d, 0x23, 0x57, 0x38, 0xfd, 0x6a, 0xaa, 0xb6, 0x61, 0x2c, 0xa8, 0x63, 0xb6, 0x1f,
	0x90, 0x4e, 0x30, 0xbf, 0xf5, 0x6f, 0x68, 0xbb, 0x48, 0xa0, 0x67, 0x36, 0x80, 0xfe, 0x55, 0x9c,
	0xeb, 0xc0, 0xd7, 0x89, 0xcc, 0x83, 0x78, 0xc7, 0xce, 0xaa, 0x8c, 0xcc, 0x90, 0x41, 0x2b, 0xe4,
	0x7c, 0x2d, 0x29, 0x19, 0xdb, 0x93, 0xee, 0xac, 0x37, 0x3d, 0x1c, 0xae, 0xbf, 0x09, 0x0a, 0x89,
	0x5d, 0xc2, 0x6f, 0xdf, 0xb0, 0x86, 0x8c, 0x77, 0xf8, 0x07, 0xda, 0x4a, 0xc6, 0xe2, 0xfe, 0xbb,
	0x03, 0x47, 0xc3, 0x79, 0xa4, 0x05, 0x6d, 0xd1, 0x82, 0x55, 0x08, 0x1a, 0xce, 0x23, 0xf6, 0xb7,
	0xf2, 0x84, 0xcc, 0x70, 0x00, 0xf6, 0x56, 0x3e, 0x1a, 0x7b, 0x27, 0xd0, 0xa3, 0xde, 0x12, 0xc4,
	0xb9, 0x12, 0xe9, 0x8f, 0xb6, 0x9c, 0x3c, 0x51, 0xb7, 0x65, 0xf6, 0x4a, 0xc0, 0x29, 0x92, 0xe0,
	0x05, 0x74, 0x4f, 0xca, 0xc0, 0xd1, 0xf1, 0xf4, 0x6a, 0x67, 0x6e, 0x2d, 0x2f, 0x33, 0xd6, 0xc0,
	0x73, 0x80, 0xf2, 0x28, 0x1c, 0x96, 0xd5, 0x9d, 0x74, 0xe5, 0xd6, 0xd1, 0x47, 0x77, 0x19, 0xb6,
	0x74, 0x57, 0x3a, 0x70, 0xeb, 0x68, 0xed, 0xf6, 0xdd, 0xb7, 0xbd, 0x47, 0xde, 0xf7, 0x1e, 0xf9,
	0xd8, 0x7b, 0xe4, 0xf9, 0xd3, 0x6b, 0xdc, 0xfd, 0x32, 0xff, 0x6a, 0xa8, 0x1e, 0x42, 0xc7, 0x4c,
	0xff, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xd4, 0x0e, 0xc8, 0xce, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BorrowClient is the client API for Borrow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BorrowClient interface {
	GetBookList(ctx context.Context, in *GetBookListReq, opts ...grpc.CallOption) (*GetBookListRsp, error)
	BorrowBook(ctx context.Context, in *BorrowBookReq, opts ...grpc.CallOption) (*BorrowBookRsp, error)
	ReturnBook(ctx context.Context, in *ReturnBookReq, opts ...grpc.CallOption) (*ReturnBookRsp, error)
}

type borrowClient struct {
	cc *grpc.ClientConn
}

func NewBorrowClient(cc *grpc.ClientConn) BorrowClient {
	return &borrowClient{cc}
}

func (c *borrowClient) GetBookList(ctx context.Context, in *GetBookListReq, opts ...grpc.CallOption) (*GetBookListRsp, error) {
	out := new(GetBookListRsp)
	err := c.cc.Invoke(ctx, "/borrow.Borrow/GetBookList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowClient) BorrowBook(ctx context.Context, in *BorrowBookReq, opts ...grpc.CallOption) (*BorrowBookRsp, error) {
	out := new(BorrowBookRsp)
	err := c.cc.Invoke(ctx, "/borrow.Borrow/BorrowBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowClient) ReturnBook(ctx context.Context, in *ReturnBookReq, opts ...grpc.CallOption) (*ReturnBookRsp, error) {
	out := new(ReturnBookRsp)
	err := c.cc.Invoke(ctx, "/borrow.Borrow/ReturnBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowServer is the server API for Borrow service.
type BorrowServer interface {
	GetBookList(context.Context, *GetBookListReq) (*GetBookListRsp, error)
	BorrowBook(context.Context, *BorrowBookReq) (*BorrowBookRsp, error)
	ReturnBook(context.Context, *ReturnBookReq) (*ReturnBookRsp, error)
}

// UnimplementedBorrowServer can be embedded to have forward compatible implementations.
type UnimplementedBorrowServer struct {
}

func (*UnimplementedBorrowServer) GetBookList(ctx context.Context, req *GetBookListReq) (*GetBookListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookList not implemented")
}
func (*UnimplementedBorrowServer) BorrowBook(ctx context.Context, req *BorrowBookReq) (*BorrowBookRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowBook not implemented")
}
func (*UnimplementedBorrowServer) ReturnBook(ctx context.Context, req *ReturnBookReq) (*ReturnBookRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBook not implemented")
}

func RegisterBorrowServer(s *grpc.Server, srv BorrowServer) {
	s.RegisterService(&_Borrow_serviceDesc, srv)
}

func _Borrow_GetBookList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServer).GetBookList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borrow.Borrow/GetBookList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServer).GetBookList(ctx, req.(*GetBookListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Borrow_BorrowBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServer).BorrowBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borrow.Borrow/BorrowBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServer).BorrowBook(ctx, req.(*BorrowBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Borrow_ReturnBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServer).ReturnBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/borrow.Borrow/ReturnBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServer).ReturnBook(ctx, req.(*ReturnBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Borrow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "borrow.Borrow",
	HandlerType: (*BorrowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookList",
			Handler:    _Borrow_GetBookList_Handler,
		},
		{
			MethodName: "BorrowBook",
			Handler:    _Borrow_BorrowBook_Handler,
		},
		{
			MethodName: "ReturnBook",
			Handler:    _Borrow_ReturnBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/borrow.proto",
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Book) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ISBN) > 0 {
		i -= len(m.ISBN)
		copy(dAtA[i:], m.ISBN)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.ISBN)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Number != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Introduction) > 0 {
		i -= len(m.Introduction)
		copy(dAtA[i:], m.Introduction)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Introduction)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Publish) > 0 {
		i -= len(m.Publish)
		copy(dAtA[i:], m.Publish)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Publish)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBookListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBookListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBookListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetBookListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBookListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBookListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBorrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BorrowBookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowBookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowBookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BookId != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.BookId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowBookRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowBookRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowBookRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReturnBookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnBookReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnBookReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BookId != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.BookId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintBorrow(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReturnBookRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReturnBookRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReturnBookRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBorrow(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBorrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovBorrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBorrow(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	l = len(m.Publish)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	l = len(m.Introduction)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovBorrow(uint64(m.Number))
	}
	l = len(m.ISBN)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBookListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBookListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovBorrow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BorrowBookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBorrow(uint64(m.UserId))
	}
	if m.BookId != 0 {
		n += 1 + sovBorrow(uint64(m.BookId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BorrowBookRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReturnBookReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovBorrow(uint64(m.UserId))
	}
	if m.BookId != 0 {
		n += 1 + sovBorrow(uint64(m.BookId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReturnBookRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBorrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBorrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBorrow(x uint64) (n int) {
	return sovBorrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publish", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publish = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Introduction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Introduction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISBN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISBN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBookListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBookListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBookListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBookListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBookListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBookListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowBookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowBookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowBookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			m.BookId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BookId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowBookRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowBookRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowBookRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnBookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnBookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnBookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			m.BookId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BookId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReturnBookRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReturnBookRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReturnBookRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBorrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBorrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBorrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBorrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBorrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBorrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBorrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBorrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBorrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBorrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBorrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBorrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBorrow = fmt.Errorf("proto: unexpected end of group")
)
